import os
import glob

# try to import an environment first
try:
  Import('env')
except:
  exec open("../../build/build-env.py")
  env = Environment()

# build and run the program that divines the version of the SM on gpu 0 of the build/test machine
nvcc_options_file = env.Command('../../build/nvcc_options_file.txt',
                                env.Program('../../build/print_sm_version.cpp'),
                                os.path.join('"' + env.GetLaunchDir(), '../../build/print_sm_version" > ../../build/nvcc_options_file.txt'))

env.Append(NVCCFLAGS = ['-optf=../../build/nvcc_options_file.txt'])

# find all .h files in the komrade directory
extensions = ['.h']
for ext in extensions:
  pattern = os.path.join(os.path.abspath('../../komrade/'), "*" + ext)
  for fullpath in glob.glob(pattern):
    headerfilename = os.path.basename(fullpath)
    # create a .cu file
    fid = open(headerfilename.replace('.h', '.cu'), 'w')
    fid.write('#include <komrade/' + headerfilename + '>\n')
    fid.close()
    # create a .cpp file
    fid = open(headerfilename.replace('.h', '_cpp.cpp'), 'w')
    fid.write('#include <komrade/' + headerfilename + '>\n')
    fid.close()
    
fid = open('main.cu', 'w')
fid.write('int main(void){ return 0; }\n')
fid.close()

# find all .cus & .cpps in the current directory
sources = []
extensions = ['*.cu', '*.cpp']
for ext in extensions:
  sources.extend(env.Glob(ext, strings = True))

tester = env.Program('tester', sources)
env.Depends(sources, nvcc_options_file)

# add all the .cu-generated linkinfo files to the clean list
for src in sources:
  if src.endswith('.cu'):
    env.Clean(tester, src.replace(".cu", ".linkinfo"))

