PREAMBLE = \
    """
    #include <thrust/segmented_scan.h>
    """

INITIALIZE = \
    """
    thrust::host_vector<$InputType>   h_input = thrusttest::random_integers<$InputType>($InputSize);
    thrust::device_vector<$InputType> d_input = h_input;
    
    thrust::host_vector<$InputType>   h_output($InputSize);
    thrust::device_vector<$InputType> d_output($InputSize);
    
    thrust::host_vector<int> h_keys($InputSize);
    for(size_t i = 0, k = 0; i < $InputSize; i++){
        h_keys[i] = k;
        if (rand() % 50 == 0)
            k++;
    }
    thrust::device_vector<int> d_keys = h_keys;

    thrust::experimental::inclusive_segmented_scan(h_input.begin(), h_input.end(), h_keys.begin(), h_output.begin());
    thrust::experimental::inclusive_segmented_scan(d_input.begin(), d_input.end(), d_keys.begin(), d_output.begin());

    ASSERT_EQUAL(h_output, d_output);
    """

TIME = \
    """
    thrust::experimental::inclusive_segmented_scan(d_input.begin(), d_input.end(), d_keys.begin(), d_output.begin());
    """

FINALIZE = \
    """
    RECORD_TIME();
    RECORD_THROUGHPUT(double($InputSize));
    """

InputTypes = SignedIntegerTypes
InputSizes = StandardSizes

TestVariables = [('InputType', InputTypes), ('InputSize', InputSizes)]

